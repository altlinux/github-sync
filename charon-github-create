#!/bin/sh -efu

cwd="$(readlink -ev "$0")"
cwd="${0%/*}"

. "$cwd/charon-sh-config"
. "$cwd/charon-sh-functions"
. "$cwd/charon-sh-github-functions"

if [ ! -f "$GITHUB_TOKEN" ]; then
	log "GITHUB token required"
	exit 1
fi

newcomers="$1"; shift

[ -f "$DATADIR/github-created" ] || :> "$DATADIR/github-created"

sort -u -o "$DATADIR/github-created" "$DATADIR/github-created"
join -t '	' -j1 -v2 -o 2.1 "$DATADIR/github-created" "$newcomers" > "$TEMPDIR/$PROG.repos-not-created"

if [ ! -s "$TEMPDIR/$PROG.repos-not-created" ]; then
	log 'nothing to do'
	exit 0
fi

log 'is going to create %s repositories' "$(wc -l < "$TEMPDIR/$PROG.repos-not-created")"
:> "$TEMPDIR/$PROG.repos-failed"

github_rate_limit

rc=0
while IFS='	' read -r repo; do
	while [ "$limit_remaining" -le 0 ]; do
		log 'GITHUB rate limit reached. The time at which the current rate limit window resets in %s' "$(date -u --date="@$limit_reset")"

		now=$(date -u '+%s')

		while [ "$now" -le "$limit_reset" ]; do
			sleep 30
			now=$(date -u '+%s')
		done

		github_rate_limit

		log 'new GITHUB rate limit %s requests' "$limit_remaining"
		log 'new GITHUB rate limit window resets in %s' "$(date -u --date="@$limit_reset")"
	done

	name="${repo%.git}"
	github_reponame github_name "$name"

	info=
	[ "$github_name" = "$name" ] ||
		info=" (as $github_name)"

	summary="$("$cwd/charon-github-create-git-summary" "$name" |sed -e "s/\"/'/g")"

	for i in 1 2 3; do
		url="/orgs/$GITHUB_ORG/repos"
		status=$(github_api_post "$url" <<-EOF
			{
			    "name": "$github_name",
			    "description": "$summary",
			    "homepage": "https://packages.altlinux.org/en/Sisyphus/srpms/$name",
			    "private": false,
			    "has_issues": false,
			    "has_projects": false,
			    "has_wiki": false,
			    "allow_squash_merge": false,
			    "allow_rebase_merge": false
			}
			EOF
		)

		limit_remaining=$(github_limit_remaining)

		[ "$status" = 500 ] ||
			break

		sleep 0.5
	done

	if [ "$status" != 201 ]; then
		printf '%s\n' "$repo" >>"$TEMPDIR/$PROG.repos-failed-to-create"

		if [ "$status" = 422 ]; then
			log '%s found on GITHUB' "$name$info"
			printf '%s\n' "$repo" >>"$DATADIR/github-created"
		else
			log 'failed to create %s on GITHUB' "$name$info"
			github_error "$url" "POST"
			rc=1
		fi

		continue
	else
		log '%s repository created' "$name$info"
	fi

	printf '%s\n' "$repo" >>"$DATADIR/github-created"

	for i in 1 2 3 4 5 6 7 8 9 0; do
		[ "$limit_remaining" -gt 0 ] ||
			break

		url="/repos/$GITHUB_ORG/$github_name/topics"
		status=$(github_api_put "$url" <<-EOF
			{
			    "names": [
			        "altlinux",
			        "package",
			        "rpm"
			    ]
			}
			EOF
		)

		limit_remaining=$(github_limit_remaining)

		[ "$status" = 404 ] ||
			break

		sleep 0.5
	done

	if [ "$status" != 200 ]; then
		github_error "$url" "PUT"
		rc=1
	fi

	sleep 0.5

done < "$TEMPDIR/$PROG.repos-not-created"

if [ -s "$TEMPDIR/$PROG.repos-failed-to-create" ]; then
	sort -u -o "$TEMPDIR/$PROG.repos-failed-to-create" "$TEMPDIR/$PROG.repos-failed-to-create"
	join -t '	' -j1 -v2 -o 2.1,2.2 \
		"$TEMPDIR/$PROG.repos-failed-to-create" "$newcomers" >"$TEMPDIR/$PROG.output"
	mv -f -- "$TEMPDIR/$PROG.output" "$newcomers"
fi

exit $rc
