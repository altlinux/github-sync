#!/bin/sh -efu

. shell-error
. shell-signal

cwd="$(readlink -ev "$0")"
cwd="${0%/*}"

. "$cwd/charon-sh-config"
. "$cwd/charon-sh-functions"

exit_handler()
{
	#return
	[ ! -d "$TEMPDIR" ] ||
		find "$TEMPDIR" -mindepth 1 -maxdepth 1 |
			xargs -r rm -rf --
}

[ -f "$GITHUB_TOKEN" ] ||
	fatal "github token required"

[ -d "$TEMPDIR"   ] || mkdir -p -- "$TEMPDIR"
[ -d "$LOGDIR"    ] || mkdir -p -- "$LOGDIR"
[ -d "$STATEDIR"  ] || mkdir -p -- "$STATEDIR"

set_cleanup_handler exit_handler

if ! "$cwd/charon-archive-state" >> "$LOGDIR/charon-archive-state.log" 2>&1; then
	log 'unable to get new archive state'
	exit 1
fi

log 'comparing changed repositories'

newcomers="$TEMPDIR/$PROG.repos-updated"
diff \
	--new-line-format='%l
' \
	--old-line-format='' \
	--unchanged-line-format='' \
	-- \
		"$old_state" \
		"$cur_state" |
	sort -k1,1 -o "$newcomers"

log 'found %s newcomers' "$(wc -l < "$newcomers")"

log 'asking cerberus to get rid of bad repositories'

if ! "$cwd/cerberus" "$newcomers" >> "$LOGDIR/cerberus.log" 2>&1; then
	log 'cannot continue as the cerberus failed'
	exit 1
fi

if [ ! -s "$newcomers" ]; then
	log 'has nothing to do'
	exit 0
fi

log 'is going to transport %s repositories to the other side using %s boats' "$(wc -l < "$newcomers")" "$MAX_BOATS"

if ! "$cwd/charon-github-create" "$newcomers" >> "$LOGDIR/charon-github-create.log" 2>&1; then
	log 'unable to create repositories on the other side'
	exit 1
fi

[ -z "$CHARON_ONLY_CREATE_REPOSITORIES" ] ||
	exit 0

num=0
while [ "$num" -lt "$MAX_BOATS" ]; do
	log 'launches boat number %s ...' "$num"
	{
		i=0
		while IFS='	' read -r repo state; do
			i=$(($i + 1))

			[ "$(($i % $MAX_BOATS))" = "$num" ] ||
				continue

			log 'invites %s to get into the boat #%s ...' "$repo" "$num"

			if ! "$cwd/charon-boat" "$num" "$repo"; then
				log 'failed to process %s on boat %s' "$repo" "$num"
				:>"$TEMPDIR/failed"
				continue
			else
				log 'successfully transported %s on boat %s' "$repo" "$num"
			fi

			repo_statedir "statedir" "$repo"
			mkdir -p -- "$statedir"

			printf '%s\t%s\n' "$repo" "$state" > "$statedir/state"

		done < "$newcomers"

	} >>"$LOGDIR/$PROG.boat.$num.log" 2>&1 &

	num=$(($num + 1))
done

log 'awaits the completion of the journey'
wait

rc=0
[ ! -e "$TEMPDIR/failed" ] || rc=1

log 'finished with rc=%s' "$rc"
exit $rc
